pipeline {
    agent any
   
    stages {
        stage('Get Code') {
            steps {
                // Borra todo lo que haya en el workspace, incluyendo .git
                //deleteDir()
                git branch: 'develop', url: 'https://github.com/jhdelca1/todo-list-aws.git'
                echo "El workspace actual es: ${env.WORKSPACE}"
                stash name:'code', includes:'**'
            }
        }
        stage('Static Test') {
            agent {label 'Agent_CI1'}     
            steps {
                script {
                    unstash name:'code'
                    echo "Ejecutando an√°lisis est√°tico con Flake8 y Bandit..."
                    // Ejecutar Flake8 y guardar el informe
                    sh 'flake8 --exit-zero --format=pylint src >flake8.out'
                    // Ejecutar Bandit y guardar el informe
                    sh 'bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"|| true'
                    echo "An√°lisis est√°tico completado. Publicando informes..."
                    recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')]
                    recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')]
                }
            }
        }
        stage('Deploy') {
            agent {label 'principal'} 
            steps {
                script {
                    unstash name:'code'
                    echo "Iniciando despliegue con AWS SAM..."
                    // Construcci√≥n del c√≥digo
                    sh 'sam build'
                    // Validaci√≥n de la plantilla SAM
                    sh 'sam validate --region us-east-1'
                    echo "Verificando si el stack est√° en estado ROLLBACK_COMPLETE..."
                    
                    // Verificar si el stack est√° en estado ROLLBACK_COMPLETE
                    def stackStatus = sh(
                        script: """
                            aws cloudformation describe-stacks --stack-name todo-list-aws-staging --region us-east-1 \
                                --query 'Stacks[0].StackStatus' --output text || echo 'STACK_NOT_FOUND'
                        """,
                        returnStdout: true
                    ).trim()
                    
                    if (stackStatus == "ROLLBACK_COMPLETE") {
                        echo "Stack en estado ROLLBACK_COMPLETE. Eliminando antes de desplegar..."
                        sh "aws cloudformation delete-stack --stack-name todo-list-aws-staging --region us-east-1"
                        sh "aws cloudformation wait stack-delete-complete --stack-name todo-list-aws-staging --region us-east-1"
                    } else {
                        echo "Stack en estado v√°lido: ${stackStatus}. Continuando con el despliegue..."
                    }
            
            // Despliegue usando la configuraci√≥n 'staging' de samconfig.toml
                    sh '''
                        sam deploy \
                            --config-env staging \
                            --parameter-overrides "CreateDynamoTable=false" \
                            --no-confirm-changeset \
                            --no-fail-on-empty-changeset
                    '''
                    echo "Despliegue completado exitosamente."
                }
            }
        }    
        
        stage('Rest Test'){
            agent {label 'Agent_CI2'}  
            steps{
                script {
                    unstash name:'code'
                    echo "Obteniendo la URL del API desde CloudFormation..."
    
                    // Agregar AWS CLI al PATH
                    sh 'export PATH=$PATH:/usr/local/bin && aws --version'

                    // Obtener `BASE_URL` desde los outputs de CloudFormation
                    def BASE_URL = sh(
                        script: """
                            aws cloudformation describe-stacks --stack-name todo-list-aws-staging --region us-east-1 \
                                --query 'Stacks[0].Outputs[?OutputKey==`BaseUrlApi`].OutputValue' --output text
                        """,
                        returnStdout: true
                    ).trim()

                    if (BASE_URL == "" || BASE_URL == "None") {
                        error "No se pudo obtener la URL del API. Verifica que el stack se haya desplegado correctamente."
                    }
    
                    echo "API URL obtenida: ${BASE_URL}"
    
                    withEnv(["BASE_URL=${BASE_URL}"]) {
                        echo "Ejecutando pruebas REST con Pytest..."
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                                python3 -m pytest --version
                                python3 -m pytest -s -v --junitxml=result-integration.xml test/integration | tee result-integration.log
                            '''
                        }
                        echo "Procesando resultados de pruebas..."
                        junit 'result-integration.xml'
                    }
                }
            }
        }

       
        stage('Promote') {
            steps {
                script {
                    unstash name:'code'
                    echo "Iniciando la promoci√≥n de la versi√≥n a producci√≥n..."
                    // Obtener el token desde los secretos de Jenkins
                    withCredentials([string(credentialsId: 'GITHUB_TOKEN', variable: 'TOKEN')]) {
                        // Configurar usuario de Git (necesario para commits autom√°ticos en Jenkins)
                        sh '''
                            git config --global user.email "jherna21@gmail.com"
                            git config --global user.name "jhdelca1"
                        '''
                        // Cambiar la URL del repositorio para usar el token
                        sh '''
                            git remote set-url origin https://$TOKEN@github.com/jhdelca1/todo-list-aws.git
                        '''
                        // Verificar que estamos en la rama `develop`
                        def currentBranch = sh(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()
                        if (currentBranch != "develop") {
                            error "La rama actual es '${currentBranch}', pero se esperaba 'develop'. Verifica la configuraci√≥n del pipeline."
                        }
        
                        echo "Cambio a la rama 'master'..."
                        sh '''
                            git fetch origin
                            git checkout main
                            git pull --rebase origin main
                        '''
                        
    
                        echo "Haciendo merge de 'develop' en 'master'..."

                        sh '''
                            git merge --no-ff develop -m "üîÄ Merge autom√°tico desde develop a main [Jenkins CI]" || true
                            git checkout --ours CHANGELOG.md  # Mantener versi√≥n de develop
                            git add CHANGELOG.md
                            git commit -m "‚úî Resolviendo conflicto en CHANGELOG.md manteniendo versi√≥n de develop" || true
                        '''
    
                        echo "Subiendo los cambios a GitHub..."
                        sh '''
                            git push origin main
                        '''
    
                        echo "Promoci√≥n completada: la versi√≥n est√° lista para master."
                    }
                }
            }
        } 
    }
}
